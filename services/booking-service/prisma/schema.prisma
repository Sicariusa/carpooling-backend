// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id              String    @id @default(uuid())
  userId          String    // Foreign key to User in user-service
  passengerId     String    // ID of the passenger making the booking
  rideId          String    // Foreign key to Ride in ride-service
  status          BookingStatus @default(PENDING) // PENDING, CONFIRMED, CANCELLED, REJECTED
  pickupLocation  String
  dropoffLocation String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // This is a virtual relation - not stored in DB but used for Prisma queries
  user            User?     @relation(fields: [userId], references: [id])
  //ride            Ride?     @relation(fields: [rideId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

// This is a reference model to the User model in the user-service
// It won't create a table but allows for type-safe references
model User {
  id        String    @id
  email     String    @unique
  firstName String
  lastName  String
  bookings  Booking[]
  // Add other fields that you need to reference from the user service
  // These won't be stored in the booking-service database
}

// This is a reference model to the Ride model in the ride-service
// It won't create a table but allows for type-safe references
model Ride {
  id             String    @id
  driverId       String
  origin         String
  destination    String
  departure      DateTime
  seatsAvailable Int
  price          Float
  isGirlsOnly    Boolean   @default(false)
  status         String
 
  // Add other fields that you need to reference from the ride service
  // These won't be stored in the booking-service database
}