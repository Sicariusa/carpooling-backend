import { OnModuleInit } from '@nestjs/common';
import { Model } from 'mongoose';
import { Ride, RideDocument } from '../schemas/ride.schema';
import { CreateRideInput, SearchRideInput, UpdateRideInput } from '../dto/ride.dto';
import { StopService } from './stop.service';
import { ZoneService } from './zone.service';
export declare class RideService implements OnModuleInit {
    private rideModel;
    private stopService;
    private zoneService;
    constructor(rideModel: Model<RideDocument>, stopService: StopService, zoneService: ZoneService);
    onModuleInit(): Promise<void>;
    findAll(): Promise<Ride[]>;
    findById(id: string): Promise<Ride>;
    findByDriver(driverId: string): Promise<Ride[]>;
    searchRides(searchInput: SearchRideInput): Promise<Ride[]>;
    create(createRideInput: CreateRideInput, driverId: string): Promise<Ride>;
    update(id: string, updateRideInput: UpdateRideInput, userId: string): Promise<Ride>;
    cancelRide(id: string, userId: string): Promise<Ride>;
    setBookingDeadline(rideId: string, minutesBeforeDeparture: number, userId: string): Promise<Ride>;
    verifyRideBooking(bookingId: string, rideId: string, userId: string): Promise<void>;
    handleBookingCancellation(bookingId: string, rideId: string, userId: string): Promise<void>;
    handleBookingAcceptance(bookingId: string, rideId: string, driverId: string): Promise<void>;
    handleBookingRejection(bookingId: string, rideId: string, driverId: string): Promise<void>;
    handleDestinationChange(bookingId: string, rideId: string, userId: string, newDropoffLocation: string): Promise<void>;
    handleUserVerification(userId: string, isDriver: boolean): Promise<void>;
    handleDriverApproval(userId: string): Promise<void>;
    private checkUserGender;
    findRideHistory(userId: string): Promise<Ride[]>;
    findUserBookings(userId: string): Promise<Ride[]>;
    calculateFareForBooking(rideId: string, pickupStopId: string, dropoffStopId: string): Promise<number>;
    private notifyBookingService;
    setGirlsOnly(id: string, girlsOnly: boolean, userId: string): Promise<Ride>;
    acceptBookingRequest(bookingId: string, rideId: string, userId: string): Promise<Ride>;
    rejectBookingRequest(bookingId: string, rideId: string, userId: string): Promise<Ride>;
    modifyDropoffLocation(bookingId: string, rideId: string, userId: string, newDropoffLocation: string): Promise<boolean>;
    handlePaymentCompleted(bookingId: string, rideId: string, userId: string): Promise<void>;
    handlePaymentFailed(bookingId: string, rideId: string, userId: string): Promise<void>;
    getStopDetails(stopId: string): Promise<any>;
}
