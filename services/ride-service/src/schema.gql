# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BookingDeadlineInput {
  """Minutes before departure to set as booking deadline"""
  minutesBeforeDeparture: Int!
  rideId: ID!
}

input CreateRideInput {
  availableSeats: Int!
  departureTime: DateTime!
  endLocation: String!
  girlsOnly: Boolean! = false
  pricePerSeat: Float!
  priceScale: Float! = 1
  startLocation: String!
  stops: [RideStopInput!]!
  totalSeats: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input ModifyDestinationInput {
  bookingId: ID!
  newDropoffLocation: String!
  rideId: ID!
}

type Mutation {
  acceptBookingRequest(bookingId: ID!, rideId: ID!): Ride!
  cancelRide(id: ID!): Ride!
  createRide(createRideInput: CreateRideInput!): Ride!
  modifyDropoffLocation(input: ModifyDestinationInput!): Boolean!
  rejectBookingRequest(bookingId: ID!, rideId: ID!): Ride!
  setBookingDeadline(input: BookingDeadlineInput!): Ride!
  setRideGirlsOnly(girlsOnly: Boolean!, id: ID!): Ride!
  updateRide(id: ID!, updateRideInput: UpdateRideInput!): Ride!
}

type Query {
  calculateFare(dropoffStopId: ID!, pickupStopId: ID!, rideId: ID!): Float!
  myBookings: [Ride!]!
  myRideHistory: [Ride!]!
  myRides: [Ride!]!
  ride(id: ID!): Ride!
  rides: [Ride!]!
  searchRides(searchInput: SearchRideInput!): [Ride!]!
}

type Ride {
  _id: ID!
  availableSeats: Int!
  bookingDeadline: DateTime
  bookingIds: [String!]!
  createdAt: DateTime!
  departureTime: DateTime!
  driverId: ID!
  endLocation: String!
  girlsOnly: Boolean!
  pricePerSeat: Float!
  priceScale: Float!
  startFromGIU: Boolean!
  startLocation: String!
  status: RideStatus!
  stops: [RideStop!]!
  totalSeats: Int!
  updatedAt: DateTime!
}

"""Status of a ride"""
enum RideStatus {
  ACTIVE
  CANCELLED
  COMPLETED
  SCHEDULED
}

type RideStop {
  sequence: Int!
  stopId: ID!
}

input RideStopInput {
  sequence: Int!
  stopId: ID!
}

input SearchRideInput {
  departureDate: DateTime
  fromZoneId: ID
  girlsOnly: Boolean
  maxPrice: Int
  minAvailableSeats: Int = 1
  toZoneId: ID
}

input UpdateRideInput {
  availableSeats: Int
  departureTime: DateTime
  girlsOnly: Boolean
  pricePerSeat: Float
  priceScale: Float
  status: RideStatus
  stops: [RideStopInput!]
  totalSeats: Int
}