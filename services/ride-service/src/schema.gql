# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BookingDeadlineInput {
  """Minutes before departure to set as booking deadline"""
  minutesBeforeDeparture: Int!
  rideId: ID!
}

input CreateRideInput {
  availableSeats: Int!
  departureTime: DateTime!
  endLocation: String!
  girlsOnly: Boolean! = false
  pricePerSeat: Float!
  priceScale: Float! = 1
  routeId: ID!
  startLocation: String!
  totalSeats: Int!
}

input CreateRouteInput {
  description: String!
  name: String!
  stops: [CreateRouteStopInput!]!
  totalDistance: Float!
}

input CreateRouteStopInput {
  sequence: Int
  stopId: ID!
}

input CreateStopInput {
  address: String!
  isActive: Boolean
  latitude: Float!
  longitude: Float!
  name: String!
  zoneId: ID!
}

input CreateZoneInput {
  description: String!
  distanceFromGIU: Int!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  cancelRide(id: ID!): Ride!
  createRide(createRideInput: CreateRideInput!): Ride!
  createRoute(input: CreateRouteInput!): Route!
  createStop(input: CreateStopInput!): Stop!
  createZone(input: CreateZoneInput!): Zone!
  removeRoute(id: ID!): Boolean!
  removeStop(id: ID!): Boolean!
  removeZone(id: ID!): Boolean!
  setBookingDeadline(input: BookingDeadlineInput!): Ride!
  setRideGirlsOnly(girlsOnly: Boolean!, id: ID!): Ride!
  updateRide(id: ID!, updateRideInput: UpdateRideInput!): Ride!
  updateRoute(id: ID!, input: UpdateRouteInput!): Route!
  updateStop(id: ID!, input: UpdateStopInput!): Stop!
  updateZone(id: ID!, input: UpdateZoneInput!): Zone!
}

type Query {
  calculateFare(dropoffStopId: ID!, pickupStopId: ID!, rideId: ID!): Float!
  myBookings: [Ride!]!
  myRideHistory: [Ride!]!
  myRides: [Ride!]!
  ride(id: ID!): Ride!
  rides: [Ride!]!
  route(id: ID!): Route!
  routes: [Route!]!
  searchRides(searchInput: SearchRideInput!): [Ride!]!
  stop(id: ID!): Stop!
  stops: [Stop!]!
  stopsByZone(zoneId: ID!): [Stop!]!
  zone(id: ID!): Zone!
  zones: [Zone!]!
}

type Ride {
  _id: ID!
  availableSeats: Int!
  bookingDeadline: DateTime
  bookingIds: [String!]!
  createdAt: DateTime!
  departureTime: DateTime!
  driverId: ID!
  endLocation: String!
  girlsOnly: Boolean!
  pricePerSeat: Float!
  priceScale: Float!
  route: Route!
  routeId: ID!
  startLocation: String!
  status: RideStatus!
  totalSeats: Int!
  updatedAt: DateTime!
}

"""Status of a ride"""
enum RideStatus {
  ACTIVE
  CANCELLED
  COMPLETED
  SCHEDULED
}

type Route {
  _id: ID!
  createdAt: DateTime!
  description: String!
  isActive: Boolean!
  name: String!
  startFromGIU: Boolean!
  stops: [RouteStop!]!
  totalDistance: Float!
  updatedAt: DateTime!
}

type RouteStop {
  sequence: Int!
  stop: Stop!
  stopId: ID!
}

input SearchRideInput {
  departureDate: DateTime
  fromZoneId: ID
  girlsOnly: Boolean
  maxPrice: Int
  minAvailableSeats: Int = 1
  toZoneId: ID
}

type Stop {
  _id: ID!
  address: String!
  createdAt: DateTime!
  isActive: Boolean!
  latitude: Float!
  longitude: Float!
  name: String!
  updatedAt: DateTime!
  zone: Zone!
  zoneId: ID!
}

input UpdateRideInput {
  availableSeats: Int
  departureTime: DateTime
  girlsOnly: Boolean
  pricePerSeat: Float
  priceScale: Float
  status: RideStatus
  totalSeats: Int
}

input UpdateRouteInput {
  description: String
  isActive: Boolean
  name: String
  stops: [CreateRouteStopInput!]
  totalDistance: Float
}

input UpdateStopInput {
  address: String
  isActive: Boolean
  latitude: Float
  longitude: Float
  name: String
  zoneId: ID
}

input UpdateZoneInput {
  description: String
  distanceFromGIU: Int
  isActive: Boolean
  name: String
}

type Zone {
  _id: ID!
  createdAt: DateTime!
  description: String!
  distanceFromGIU: Int!
  isActive: Boolean!
  name: String!
  updatedAt: DateTime!
}